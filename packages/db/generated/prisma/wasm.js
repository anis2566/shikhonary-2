
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  role: 'role',
  status: 'status',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountId: 'accountId',
  providerId: 'providerId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  expiresAt: 'expiresAt',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassNameScalarFieldEnum = {
  id: 'id',
  name: 'name',
  level: 'level',
  position: 'position',
  subjectIds: 'subjectIds',
  chapterIds: 'chapterIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  group: 'group',
  classNameIds: 'classNameIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChapterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  position: 'position',
  subjectId: 'subjectId',
  examIds: 'examIds',
  classNameIds: 'classNameIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChapterContextScalarFieldEnum = {
  id: 'id',
  title: 'title',
  author: 'author',
  authorSummary: 'authorSummary',
  content: 'content',
  meaning: 'meaning',
  summary: 'summary',
  chapterId: 'chapterId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.McqScalarFieldEnum = {
  id: 'id',
  question: 'question',
  options: 'options',
  statements: 'statements',
  answer: 'answer',
  type: 'type',
  reference: 'reference',
  explanation: 'explanation',
  isMath: 'isMath',
  session: 'session',
  source: 'source',
  questionUrl: 'questionUrl',
  contextUrl: 'contextUrl',
  context: 'context',
  subjectId: 'subjectId',
  chapterId: 'chapterId',
  examIds: 'examIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  questionCount: 'questionCount',
  duration: 'duration',
  status: 'status',
  classNameId: 'classNameId',
  subjectId: 'subjectId',
  chapterIds: 'chapterIds',
  questionIds: 'questionIds',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.McqAttemptScalarFieldEnum = {
  id: 'id',
  answers: 'answers',
  total: 'total',
  score: 'score',
  streak: 'streak',
  longestStreak: 'longestStreak',
  wrongAnswer: 'wrongAnswer',
  status: 'status',
  startTime: 'startTime',
  endTime: 'endTime',
  examId: 'examId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamFeedbackScalarFieldEnum = {
  id: 'id',
  mcqAttemptId: 'mcqAttemptId',
  userId: 'userId',
  overallSummary: 'overallSummary',
  strengths: 'strengths',
  weaknesses: 'weaknesses',
  recommendations: 'recommendations',
  detailedAnalysis: 'detailedAnalysis',
  userRating: 'userRating',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreditPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  credit: 'credit',
  price: 'price',
  discount: 'discount',
  save: 'save',
  bonus: 'bonus',
  status: 'status',
  isPopular: 'isPopular',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  amount: 'amount',
  type: 'type',
  method: 'method',
  status: 'status',
  userId: 'userId',
  creditPlanId: 'creditPlanId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExamPlanScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  credit: 'credit',
  mcqs: 'mcqs',
  exams: 'exams',
  attempts: 'attempts',
  features: 'features',
  aiFeedbackFeatures: 'aiFeedbackFeatures',
  enableDownloadReport: 'enableDownloadReport',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanPurchaseScalarFieldEnum = {
  id: 'id',
  usedMcqs: 'usedMcqs',
  usedExams: 'usedExams',
  usedAttempts: 'usedAttempts',
  status: 'status',
  userId: 'userId',
  planId: 'planId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReferScalarFieldEnum = {
  id: 'id',
  hasPurchased: 'hasPurchased',
  refererId: 'refererId',
  refereeId: 'refereeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  isFeatured: 'isFeatured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecommendationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  reason: 'reason',
  examId: 'examId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  Verification: 'Verification',
  ClassName: 'ClassName',
  Subject: 'Subject',
  Chapter: 'Chapter',
  ChapterContext: 'ChapterContext',
  Mcq: 'Mcq',
  Exam: 'Exam',
  McqAttempt: 'McqAttempt',
  ExamFeedback: 'ExamFeedback',
  CreditPlan: 'CreditPlan',
  Transaction: 'Transaction',
  ExamPlan: 'ExamPlan',
  PlanPurchase: 'PlanPurchase',
  Refer: 'Refer',
  Announcement: 'Announcement',
  Recommendation: 'Recommendation'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\ANIS\\Desktop\\shikhonary\\packages\\db\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      },
      {
        "fromEnvVar": null,
        "value": "rhel-openssl-3.0.x"
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\ANIS\\Desktop\\shikhonary\\packages\\db\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mongodb",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider      = \"prisma-client-js\"\n  output        = \"../generated/prisma\"\n  binaryTargets = [\"native\", \"rhel-openssl-3.0.x\"]\n}\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id            String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name          String?\n  email         String?\n  emailVerified Boolean @default(false)\n  image         String?\n  role          String  @default(\"User\")\n  status        String  @default(\"Pending\")\n  phone         String?\n\n  referredToMe Refer? @relation(\"UserIsReferee\")\n\n  accounts     Account[]\n  sessions     Session[]\n  exams        Exam[]\n  attempts     McqAttempt[]\n  feedbacks    ExamFeedback[]\n  transactions Transaction[]\n  purchases    PlanPurchase[]\n\n  referredByMe Refer[] @relation(\"UserIsReferer\")\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([email])\n}\n\nmodel Account {\n  id           String    @id @default(auto()) @map(\"_id\") @db.ObjectId\n  userId       String    @db.ObjectId\n  accountId    String\n  providerId   String\n  accessToken  String?\n  refreshToken String?\n  idToken      String?\n  expiresAt    DateTime?\n  password     String?\n  createdAt    DateTime  @default(now())\n  updatedAt    DateTime  @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([providerId, accountId])\n  @@index([userId])\n}\n\nmodel Session {\n  id           String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  sessionToken String   @unique @map(\"token\")\n  userId       String   @db.ObjectId\n  expiresAt    DateTime\n  ipAddress    String?\n  userAgent    String?\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n}\n\nmodel Verification {\n  id         String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  @@unique([identifier, value])\n}\n\nmodel ClassName {\n  id       String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name     String @unique\n  level    String\n  position Int    @default(0)\n\n  subjectIds String[]  @db.ObjectId\n  subjects   Subject[] @relation(fields: [subjectIds], references: [id])\n\n  chapterIds String[]  @db.ObjectId\n  chapters   Chapter[] @relation(fields: [chapterIds], references: [id])\n\n  exams Exam[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([level])\n  @@index([name, level])\n}\n\nmodel Subject {\n  id    String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name  String\n  group String?\n\n  classNameIds String[]    @db.ObjectId\n  classNames   ClassName[] @relation(fields: [classNameIds], references: [id])\n\n  chapters Chapter[]\n  mcqs     Mcq[]\n  exams    Exam[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([name])\n  @@index([group])\n  @@index([name, group])\n}\n\nmodel Chapter {\n  id       String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name     String\n  position Int    @default(0)\n\n  subjectId String  @db.ObjectId\n  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)\n\n  examIds String[] @db.ObjectId\n  exams   Exam[]   @relation(fields: [examIds], references: [id])\n\n  classNameIds String[]    @db.ObjectId\n  classNames   ClassName[] @relation(fields: [classNameIds], references: [id])\n\n  context ChapterContext?\n  mcqs    Mcq[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([subjectId])\n  @@index([name])\n  @@index([subjectId, name])\n}\n\nmodel ChapterContext {\n  id            String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title         String\n  author        String?\n  authorSummary String?\n  content       String\n  meaning       String?\n  summary       String?\n\n  chapterId String  @unique @db.ObjectId\n  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([title])\n  @@index([author])\n}\n\nmodel Mcq {\n  id          String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  question    String\n  options     String[]\n  statements  String[] @default([])\n  answer      String\n  type        String\n  reference   String?\n  explanation String?\n  isMath      Boolean  @default(false)\n  session     Int\n  source      String?\n  questionUrl String?\n  contextUrl  String?\n\n  context String?\n\n  subjectId String  @db.ObjectId\n  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)\n\n  chapterId String  @db.ObjectId\n  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)\n\n  examIds String[] @db.ObjectId\n  exams   Exam[]   @relation(fields: [examIds], references: [id])\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([subjectId])\n  @@index([chapterId])\n  @@index([type])\n  @@index([session])\n  @@index([isMath])\n  @@index([subjectId, chapterId])\n  @@index([subjectId, type])\n  @@index([chapterId, type])\n  @@index([type, session])\n}\n\nmodel Exam {\n  id            String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title         String\n  type          String\n  questionCount Int\n  duration      Int\n  status        String @default(\"Pending\")\n\n  classNameId String    @db.ObjectId\n  className   ClassName @relation(fields: [classNameId], references: [id], onDelete: NoAction)\n\n  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: NoAction)\n  subjectId String  @db.ObjectId\n\n  chapterIds String[]  @db.ObjectId\n  chapters   Chapter[] @relation(fields: [chapterIds], references: [id])\n\n  questionIds String[] @db.ObjectId\n  questions   Mcq[]    @relation(fields: [questionIds], references: [id])\n\n  userId String @db.ObjectId\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  attempts        McqAttempt[]\n  recommendations Recommendation[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([title])\n  @@index([userId])\n  @@index([status])\n  @@index([type])\n  @@index([classNameId])\n  @@index([subjectId])\n  @@index([createdAt])\n  @@index([userId, status])\n  @@index([userId, type])\n  @@index([classNameId, subjectId])\n  @@index([status, createdAt])\n  @@index([userId, createdAt])\n}\n\nmodel McqAttempt {\n  id String @id @default(auto()) @map(\"_id\") @db.ObjectId\n\n  answers       String[]  @default([])\n  total         Int\n  score         Int       @default(0)\n  streak        Int       @default(0)\n  longestStreak Int       @default(0)\n  wrongAnswer   Int       @default(0)\n  status        String    @default(\"Pending\")\n  startTime     DateTime?\n  endTime       DateTime?\n\n  examId String @db.ObjectId\n  exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)\n\n  userId String @db.ObjectId\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  feedback ExamFeedback?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([userId])\n  @@index([examId])\n  @@index([status])\n  @@index([score])\n  @@index([createdAt])\n  @@index([userId, examId])\n  @@index([userId, status])\n  @@index([userId, createdAt])\n  @@index([examId, status])\n  @@index([status, createdAt])\n  @@index([userId, score])\n}\n\nmodel ExamFeedback {\n  id String @id @default(auto()) @map(\"_id\") @db.ObjectId\n\n  mcqAttemptId String     @unique @db.ObjectId\n  mcqAttempt   McqAttempt @relation(fields: [mcqAttemptId], references: [id], onDelete: Cascade)\n\n  userId String @db.ObjectId\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  overallSummary  String\n  strengths       String[] @default([])\n  weaknesses      String[] @default([])\n  recommendations String[] @default([])\n\n  detailedAnalysis Json?\n\n  userRating Int?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([userId])\n  @@index([userRating])\n  @@index([createdAt])\n  @@index([userId, createdAt])\n  @@index([userId, userRating])\n}\n\nmodel CreditPlan {\n  id        String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name      String\n  credit    Int\n  price     Int\n  discount  Int\n  save      Int\n  bonus     Int\n  status    String  @default(\"Active\")\n  isPopular Boolean @default(false)\n\n  transactions Transaction[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([status])\n  @@index([isPopular])\n  @@index([price])\n  @@index([credit])\n  @@index([status, isPopular])\n  @@index([status, price])\n}\n\nmodel Transaction {\n  id            String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  transactionId String\n  amount        Int\n  type          String\n  method        String\n  status        String @default(\"Pending\")\n\n  userId String @db.ObjectId\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  creditPlanId String     @db.ObjectId\n  creditPlan   CreditPlan @relation(fields: [creditPlanId], references: [id], onDelete: NoAction)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([transactionId])\n  @@index([userId])\n  @@index([status])\n  @@index([type])\n  @@index([method])\n  @@index([createdAt])\n  @@index([userId, status])\n  @@index([userId, type])\n  @@index([status, createdAt])\n  @@index([userId, createdAt])\n  @@index([amount])\n}\n\nmodel ExamPlan {\n  id                   String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title                String\n  description          String\n  credit               Int\n  mcqs                 Int      @default(0)\n  exams                Int      @default(0)\n  attempts             Int      @default(0)\n  features             String[]\n  aiFeedbackFeatures   String[]\n  enableDownloadReport Boolean  @default(false)\n\n  purchases PlanPurchase[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([credit])\n  @@index([mcqs])\n  @@index([exams])\n  @@index([attempts])\n  @@index([title])\n}\n\nmodel PlanPurchase {\n  id           String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  usedMcqs     Int    @default(0)\n  usedExams    Int    @default(0)\n  usedAttempts Int    @default(0)\n  status       String @default(\"Pending\")\n\n  userId String @db.ObjectId\n  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  planId String   @db.ObjectId\n  plan   ExamPlan @relation(fields: [planId], references: [id], onDelete: NoAction)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([userId])\n  @@index([planId])\n  @@index([status])\n  @@index([createdAt])\n  @@index([userId, status])\n  @@index([userId, planId])\n  @@index([status, createdAt])\n}\n\nmodel Refer {\n  id           String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  hasPurchased Boolean @default(false)\n\n  refererId String @db.ObjectId\n  referer   User   @relation(\"UserIsReferer\", fields: [refererId], references: [id], onDelete: Cascade)\n\n  refereeId String @unique @db.ObjectId\n  referee   User   @relation(\"UserIsReferee\", fields: [refereeId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([refererId])\n  @@index([hasPurchased])\n  @@index([createdAt])\n  @@index([refererId, hasPurchased])\n}\n\nmodel Announcement {\n  id         String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title      String\n  content    String\n  isFeatured Boolean @default(false)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([isFeatured])\n  @@index([createdAt])\n  @@index([isFeatured, createdAt])\n}\n\nmodel Recommendation {\n  id     String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title  String\n  reason String\n\n  examId String @db.ObjectId\n  exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([examId])\n  @@index([createdAt])\n  @@index([examId, createdAt])\n}\n",
  "inlineSchemaHash": "01d44bd2cc6260093f12b1b478eafde96e934b3bef8861c050c8142be90fae02",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"referredToMe\",\"kind\":\"object\",\"type\":\"Refer\",\"relationName\":\"UserIsReferee\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"exams\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ExamToUser\"},{\"name\":\"attempts\",\"kind\":\"object\",\"type\":\"McqAttempt\",\"relationName\":\"McqAttemptToUser\"},{\"name\":\"feedbacks\",\"kind\":\"object\",\"type\":\"ExamFeedback\",\"relationName\":\"ExamFeedbackToUser\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"TransactionToUser\"},{\"name\":\"purchases\",\"kind\":\"object\",\"type\":\"PlanPurchase\",\"relationName\":\"PlanPurchaseToUser\"},{\"name\":\"referredByMe\",\"kind\":\"object\",\"type\":\"Refer\",\"relationName\":\"UserIsReferer\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accessToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"idToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"}],\"dbName\":null},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"token\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":null},\"Verification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ClassName\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"level\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"position\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"subjectIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subjects\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"ClassNameToSubject\"},{\"name\":\"chapterIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chapters\",\"kind\":\"object\",\"type\":\"Chapter\",\"relationName\":\"ChapterToClassName\"},{\"name\":\"exams\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ClassNameToExam\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Subject\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"group\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"classNameIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"classNames\",\"kind\":\"object\",\"type\":\"ClassName\",\"relationName\":\"ClassNameToSubject\"},{\"name\":\"chapters\",\"kind\":\"object\",\"type\":\"Chapter\",\"relationName\":\"ChapterToSubject\"},{\"name\":\"mcqs\",\"kind\":\"object\",\"type\":\"Mcq\",\"relationName\":\"McqToSubject\"},{\"name\":\"exams\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ExamToSubject\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Chapter\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"position\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"subjectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"ChapterToSubject\"},{\"name\":\"examIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"exams\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ChapterToExam\"},{\"name\":\"classNameIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"classNames\",\"kind\":\"object\",\"type\":\"ClassName\",\"relationName\":\"ChapterToClassName\"},{\"name\":\"context\",\"kind\":\"object\",\"type\":\"ChapterContext\",\"relationName\":\"ChapterToChapterContext\"},{\"name\":\"mcqs\",\"kind\":\"object\",\"type\":\"Mcq\",\"relationName\":\"ChapterToMcq\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ChapterContext\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"authorSummary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meaning\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"summary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chapterId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chapter\",\"kind\":\"object\",\"type\":\"Chapter\",\"relationName\":\"ChapterToChapterContext\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Mcq\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"question\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"options\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"statements\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"answer\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reference\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"explanation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isMath\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"session\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"source\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questionUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contextUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"context\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subjectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subject\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"McqToSubject\"},{\"name\":\"chapterId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chapter\",\"kind\":\"object\",\"type\":\"Chapter\",\"relationName\":\"ChapterToMcq\"},{\"name\":\"examIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"exams\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ExamToMcq\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Exam\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questionCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"classNameId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"className\",\"kind\":\"object\",\"type\":\"ClassName\",\"relationName\":\"ClassNameToExam\"},{\"name\":\"subject\",\"kind\":\"object\",\"type\":\"Subject\",\"relationName\":\"ExamToSubject\"},{\"name\":\"subjectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chapterIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chapters\",\"kind\":\"object\",\"type\":\"Chapter\",\"relationName\":\"ChapterToExam\"},{\"name\":\"questionIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questions\",\"kind\":\"object\",\"type\":\"Mcq\",\"relationName\":\"ExamToMcq\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ExamToUser\"},{\"name\":\"attempts\",\"kind\":\"object\",\"type\":\"McqAttempt\",\"relationName\":\"ExamToMcqAttempt\"},{\"name\":\"recommendations\",\"kind\":\"object\",\"type\":\"Recommendation\",\"relationName\":\"ExamToRecommendation\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"McqAttempt\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"answers\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"total\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"streak\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"longestStreak\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"wrongAnswer\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"examId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"exam\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ExamToMcqAttempt\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"McqAttemptToUser\"},{\"name\":\"feedback\",\"kind\":\"object\",\"type\":\"ExamFeedback\",\"relationName\":\"ExamFeedbackToMcqAttempt\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ExamFeedback\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"mcqAttemptId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mcqAttempt\",\"kind\":\"object\",\"type\":\"McqAttempt\",\"relationName\":\"ExamFeedbackToMcqAttempt\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ExamFeedbackToUser\"},{\"name\":\"overallSummary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"strengths\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"weaknesses\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recommendations\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"detailedAnalysis\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"userRating\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CreditPlan\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"credit\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"discount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"save\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"bonus\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isPopular\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"CreditPlanToTransaction\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Transaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"transactionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"method\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TransactionToUser\"},{\"name\":\"creditPlanId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"creditPlan\",\"kind\":\"object\",\"type\":\"CreditPlan\",\"relationName\":\"CreditPlanToTransaction\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ExamPlan\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"credit\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"mcqs\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"exams\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"attempts\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"features\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"aiFeedbackFeatures\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"enableDownloadReport\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"purchases\",\"kind\":\"object\",\"type\":\"PlanPurchase\",\"relationName\":\"ExamPlanToPlanPurchase\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"PlanPurchase\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"usedMcqs\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"usedExams\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"usedAttempts\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PlanPurchaseToUser\"},{\"name\":\"planId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"plan\",\"kind\":\"object\",\"type\":\"ExamPlan\",\"relationName\":\"ExamPlanToPlanPurchase\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Refer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"hasPurchased\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"refererId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"referer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserIsReferer\"},{\"name\":\"refereeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"referee\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserIsReferee\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Announcement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isFeatured\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Recommendation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"examId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"exam\",\"kind\":\"object\",\"type\":\"Exam\",\"relationName\":\"ExamToRecommendation\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

